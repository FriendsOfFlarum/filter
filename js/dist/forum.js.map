{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3ER,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,mBCAlF,MAAM,EAA+BI,OAAOC,IAAIP,IAAI,OAAQ,iBCAtD,EAA+BM,OAAOC,IAAIP,IAAI,OAAQ,a,aCA5D,MAAM,EAA+BM,OAAOC,IAAIP,IAAI,OAAQ,gC,aCc5D,iBAAiBQ,IAAI,aAAc,MACjC,IAAAC,UAAS,cAAuB,aAAc,SAAUC,EAAUC,GAChE,GAAoB,YAAhBA,EAAKC,OAAsB,CAC7B,MAAMC,EAASF,EAAKG,eACpB,MAAO,CAAC,eAAeC,MAAM,iCAAkCF,EAASG,EAAE,OAAQ,CAChFC,UAAW,uBACVJ,GAAU,GACf,CACA,OAAOH,EAASC,EAClB,KACE,G","sources":["webpack://@fof/filter/webpack/bootstrap","webpack://@fof/filter/webpack/runtime/compat get default export","webpack://@fof/filter/webpack/runtime/define property getters","webpack://@fof/filter/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/filter/external root \"flarum.reg.get('core', 'common/extend')\"","webpack://@fof/filter/external root \"flarum.reg.get('core', 'forum/app')\"","webpack://@fof/filter/external root \"flarum.reg.get('core', 'forum/components/CommentPost')\"","webpack://@fof/filter/./src/forum/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/extend');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'forum/app');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'forum/components/CommentPost');","/*\n *\n *  This file is part of fof/filter.\n *\n *  Copyright (c) 2020 FriendsOfFlarum..\n *\n *  For the full copyright and license information, please view the license.md\n *  file that was distributed with this source code.\n *\n */\n\nimport { override } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport CommentPost from 'flarum/forum/components/CommentPost';\napp.initializers.add('fof-filter', () => {\n  override(CommentPost.prototype, 'flagReason', function (original, flag) {\n    if (flag.type() === 'autoMod') {\n      const detail = flag.reasonDetail();\n      return [app.translator.trans('fof-filter.forum.flagger_name'), detail ? m(\"span\", {\n        className: \"Post-flagged-detail\"\n      }, detail) : ''];\n    }\n    return original(flag);\n  });\n}, -20);"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","flarum","reg","add","override","original","flag","type","detail","reasonDetail","trans","m","className"],"sourceRoot":""}